#+title: Summer session: Drawing machines and robots

* Setting up Python and py5canvas
** Dependencies
The main requirements for Py5Canvas are [[https://numpy.org][NumPy]], [[https://matplotlib.org][Matplotlib]], [[https://pycairo.readthedocs.io/en/latest/][pyCairo]] and [[https://pyglet.readthedocs.io/en/latest/][Pyglet]]. Pyglet is only necessary if you want to use interactivity but it will be automatically installed with the procedure described in the next section. To fully use the Canvas API with video input, you will also need [[https://opencv.org][OpenCV]], The instructions below include it, but it is not essential.
The dependency installation procedure depends on the [[https://docs.conda.io/en/latest/][conda package mananger]]. With many different options, one ideal way to install conda is to use the reduced [[https://github.com/conda-forge/miniforge][miniforge]] installer (saves disk space). To speed up installation, it is recommended to install [[https://mamba.readthedocs.io/en/latest/][mamba]] alongside conda (since "vanilla" conda is written in Python and can be extremely slow). Once a version of conda is installed, install mamba with:
#+begin_example
conda install conda-forge::mamba
#+end_example
Afterwards, you can pretty much replace any use of ~conda~ with ~mamba~ and things will go significantly faster.

You might want to create a conda Python environment before going forward, which means you will be able to install the dependencies without interfering with your base Python installation. To do so you can do:
#+begin_example
conda create -n py5 python=3.10
#+end_example
and then
#+begin_example
conda activate py5
#+end_example

Finally, install the required dependencies with (use mamba if installed):
#+begin_example
conda install -c conda-forge numpy matplotlib pycairo opencv
#+end_example

** Installing py5canvas with pip
py5canvas is still not on PyPi, so for the moment you can use one of the following to install:
#+begin_example
pip install git+https://github.com/colormotor/py5canvas.git
#+end_example
To update the module to its latest version use
#+begin_example
pip install --upgrade  --force-reinstall --no-deps git+https://github.com/colormotor/py5canvas.git
#+end_example

Then install the latest version of Pyglet with
#+begin_example
pip install pyglet
#+end_example


** Install locally with pip
With this procedure, you will be able to pull the latest changes to the module with git. Firt, clone the repository in a given directory, e.g. with
#+begin_example
git clone https://github.com/colormotor/py5canvas.git
#+end_example
or by using your Git frontend of choice.
Then navigate to the ~py5canvas~ directory and install locally with
#+begin_example
pip install -e .
#+end_example
Now any modification to the code in the directory will be always available when you import hte module.


* Links
:PROPERTIES:
:CUSTOM_ID: links
:END:
** Python, useful packages (for generating drawings etc.)
:PROPERTIES:
:CUSTOM_ID: python-useful-packages-for-generating-drawings-etc.
:END:
- [[https://pypi.org/project/perlin-noise/][perlin-noise]] A Perlin noise library (pip install)
- [[https://github.com/pvigier/perlin-numpy][perlin-numpy]] Another Perlin noise library
- [[https://shapely.readthedocs.io/en/stable/manual.html][Shapely]] Good
  library for manipulating gemetry, originally aimed at GIS
  (Geographical Information Systems) but can be useful for art-related
  applications as well.
- [[https://networkx.github.io][NetworkX]] Nice Graph library for
  Python. Includes many
  [[https://networkx.org/documentation/stable/reference/algorithms/index.html][algorithms]]
  that can be used to generate graphics.
- [[https://scikit-image.org][Scikit-image]] Powerful image processing library (install with conda)
- [[https://www.scipy.org][SciPy]] Generally useful as an addition to
  NumPy. Has wrappers to generate
  [[https://en.wikipedia.org/wiki/Voronoi_diagram][Voronoi diagrams]],
  [[https://en.wikipedia.org/wiki/Delaunay_triangulation][Delaunay
  triangulations]] and a useful
  [[https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.splrep.html][smoothing
  spline implementation]].
- [[https://vtk.org][The visualization toolkit (VTK)]] Powerful geometry
  processing library, that can be used in combination with the
  [[https://github.com/colormotor/polygonsoup/tree/main/py][polygonsoup]]
  package.
- [[https://github.com/fonttools/fonttools][fonttools]] Useful to load
  TrueType font files
- [[https://github.com/scikit-geometry/scikit-geometry][scikit-geometry]]
  Provides a Python interface for the the powerful
  [[https://www.cgal.org][Computational Geometry Algorithms Library
  (CGAL)]].
- [[https://opencv.org][OpenCV]] For image processing, has Python
  bindings that are easy to integrate with NumPy.
- [[https://pycairo.readthedocs.io/en/latest/][PyCairo]] For 2d vector
  graphics (py5canvas wraps this for drawing).

** Axidraw related links
:PROPERTIES:
:CUSTOM_ID: axidraw-related-links
:END:
- [[https://cdn.evilmadscientist.com/wiki/axidraw/software/AxiDraw_V37r1.pdf][AxiDraw
  V3 manual]]
- [[https://github.com/fogleman/axi][AxiDraw control Python package]]
- [[https://lurkertech.com/axiserver/][AxiDraw Server]]
- [[https://lurkertech.com/3daxi/][Smooth pen up/down movement hack]]
  extension to smoothly control pen pressure.

** Other languages, tools useful for AxiDraw
:PROPERTIES:
:CUSTOM_ID: other-languages-tools-useful-for-axidraw
:END:
- [[https://calinon.ch/codes.htm][Pbdlib]] Sylvain Calinon has open
  source code that can be easily adapted to generate drawings with
  AxiDraw.
- [[https://processing.org][processing]] is a wrapper around Java
  intended to facilitate "sketching" of graphic ideas.
  - [[https://www.generativehut.com/post/axidraw-processing]] This is a
    link explains how to interface processing with AxiDraw.
- [[https://p5js.org]] a JavaScript version of Processing.
- [[http://paperjs.org]] a powerful javascript library for 2d vector
  graphics.
- [[https://turtletoy.net]] a online JavaScript library and coding
  sandbox with many examples that are extremely plotter-friendly.
- [[https://github.com/fogleman/ln]] a line-based 3d renderer written in
  Go. Very powerful, based on signed distance fields.
- [[http://hackingforartists.com]] many more links to explore that are
  not listed here.

** Curves and surfaces
:PROPERTIES:
:CUSTOM_ID: curves-and-surfaces
:END:
- [[http://paulbourke.net/geometry]] Paul Bourkes' website. Full of
  formulas/code examples
- Euler spirals (or Cornu Spirals, or clothoids), a presentation by Raph
  Levien
  [[https://www2.eecs.berkeley.edu/Pubs/TechRpts/2008/EECS-2008-111.pdf]].
  Can be generated with the Fresnel integrals, which are implemented in
  [[https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.fresnel.html][SciPy]]
- Online primer/book on BÃ©zier curves:
  [[https://pomax.github.io/bezierinfo/]]

** Graphics/Geometry
:PROPERTIES:
:CUSTOM_ID: graphicsgeometry
:END:
- [[https://www.jasondavies.com]] has a collection of nice Javasript
  demos with computational geometry algorithms.
- [[http://jeffe.cs.illinois.edu/compgeom/code.html]] a nice collection
  of computational geometry codes in C/C++.
- A tutorial on Hexagonal grids:
  [[http://www-cs-students.stanford.edu/~amitp/Articles/HexLOS.html]]
- [[https://www.glassner.com/writing/tech-notes/][Tech notes]] by Andrew
  Glassner
- [[https://cs.nyu.edu/~perlin/][Ken Perlin's home page]] has many nice
  interactive examples (beautifully) written in Java.
- [[http://hackingforartists.com]] A resource with different links that
  can be handy for generating drawings.

** Contemporary artists using AxiDraw, plotters, robots
:PROPERTIES:
:CUSTOM_ID: contemporary-artists-using-axidraw-plotters-robots
:END:
- [[https://www.michaelfogleman.com][Michael Fogleman]] who wrote the
  Axi library.
- [[https://joanielemercier.com][Joanie Lemercier]], video/media artist.
- [[https://twitter.com/wblut][Frederik Vanhoutte]], who also has some
  useful online code [[https://github.com/wblut]].
- [[http://juerglehni.com][Jurg Lehni]] font-designer, author of
  Paper.js and builder of some really nice custom built plotters.
- [[https://patricktresset.com/new/][Patrick Tresset]] is a contemporary
  artist that works with low-cost robot arms and plotters.
- I have built and worked with a number of plotters (custom built an
  non): https://www.enist.org/post/drawing_machines/.

** Early computer art and artists using plotters (for inspiration)
:PROPERTIES:
:CUSTOM_ID: early-computer-art-and-artists-using-plotters-for-inspiration
:END:
- [[http://www.verostko.com/algorist.html][The Algorists]], article by
  Roman Verotsko
- [[http://computer-arts-society.com/cas50-collection]]
- [[https://www.atariarchives.org/artist/][Artist and Computer digital
  book]]
- [[https://www.emohr.com][Manfred Mohr]]
- [[http://www.verostko.com][Roman Verotsko]]
- [[http://cyberneticserendipity.net][Cybernetic serendipity]]
  exhibition.
- [[http://www.vam.ac.uk/content/articles/a/computer-art-history/][Short
  article on computer art history]]
- [[http://collections.vam.ac.uk/search/?id_technique=x43893][Plotter
  drawings at the V&A]]
